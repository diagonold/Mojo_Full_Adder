/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg c,
    input cout,
    input sum
  );
  
  
  
  reg rst;
  
  reg [23:0] abc;
  
  reg [15:0] sc;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_button_cond_center_out;
  reg [1-1:0] M_button_cond_center_in;
  button_conditioner_2 button_cond_center (
    .clk(clk),
    .in(M_button_cond_center_in),
    .out(M_button_cond_center_out)
  );
  wire [1-1:0] M_button_cond_up_out;
  reg [1-1:0] M_button_cond_up_in;
  button_conditioner_2 button_cond_up (
    .clk(clk),
    .in(M_button_cond_up_in),
    .out(M_button_cond_up_out)
  );
  wire [1-1:0] M_button_cond_right_out;
  reg [1-1:0] M_button_cond_right_in;
  button_conditioner_2 button_cond_right (
    .clk(clk),
    .in(M_button_cond_right_in),
    .out(M_button_cond_right_out)
  );
  reg [99:0] M_clock_d, M_clock_q = 1'h0;
  localparam MANUAL_state = 2'd0;
  localparam ERROR_state = 2'd1;
  localparam AUTO_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = MANUAL_state;
  reg [7:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_clock_d = M_clock_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_button_cond_center_in = io_button[1+0-:1];
    M_button_cond_up_in = io_button[0+0-:1];
    M_button_cond_right_in = io_button[4+0-:1];
    abc = 24'h053977;
    sc = 16'h166b;
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    
    case (M_state_q)
      MANUAL_state: begin
        a = io_dip[0+0+0-:1];
        b = io_dip[0+1+0-:1];
        c = io_dip[0+2+0-:1];
        if (M_button_cond_center_out == 1'h1) begin
          M_state_d = AUTO_state;
        end
      end
      ERROR_state: begin
        io_led = 24'haaaaaa;
        if (M_button_cond_right_out == 1'h1) begin
          M_state_d = MANUAL_state;
        end
      end
      AUTO_state: begin
        a = abc[(M_counter_q)*3+0+0-:1];
        b = abc[(M_counter_q)*3+1+0-:1];
        c = abc[(M_counter_q)*3+2+0-:1];
        M_clock_d = M_clock_q + 1'h1;
        if (M_button_cond_up_out == 1'h1) begin
          M_state_d = MANUAL_state;
        end
        if (M_clock_q[24+0-:1] == 1'h1) begin
          M_counter_d = M_counter_q + 1'h1;
          M_clock_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_clock_q <= M_clock_d;
    
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
